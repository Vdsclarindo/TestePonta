unit uDmAnimal;

interface

uses
  System.Generics.Collections,System.SysUtils, System.Classes, Data.FMTBcd, Data.DB, Datasnap.DBClient,
  Datasnap.Provider, Data.SqlExpr, uAnimalModel, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TDmAnimal = class(TDataModule)
    dsPesquisar: TDataSetProvider;
    cdsPesquisar: TClientDataSet;
    cdsPesquisarFAZENDA_ID: TIntegerField;
    dsFazendas: TDataSetProvider;
    cdsFazendas: TClientDataSet;
    cdsFazendasID: TIntegerField;
    cdsFazendasNOME: TStringField;
    cdsFazendasENDERECO: TStringField;
    cdsFazendasCNPJ: TStringField;
    cdsPesquisarTAG: TIntegerField;
    cdsPesquisarNOME: TStringField;
    cdsPesquisarID: TIntegerField;
    tabAnimal: TFDTable;
    dsAnimal: TDataSource;
    tabAnimalID: TIntegerField;
    tabAnimalTAG: TIntegerField;
    tabAnimalFAZENDA_ID: TIntegerField;
    qryInserir: TFDQuery;
    qryPesquisar: TFDQuery;
    qryExcluir: TFDQuery;
    qryAlterar: TFDQuery;
    qryFazendas: TFDQuery;
  private
    { Private declarations }
  public
    procedure Pesquisar(Tag : string);
    procedure CarregarAnimal(Animal : TAnimal; Id : Integer);
    function Inserir(Animais : TObjectList<TAnimal>; out sErro: string): Boolean;
    function Alterar(Animal : TAnimal; out sErro: string): Boolean;
    function Excluir(Id : Integer; out sErro: string): Boolean;
  end;

var
  DmAnimal: TDmAnimal;

implementation

uses
  uDmConexao;

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDmAnimal }

procedure TDmAnimal.CarregarAnimal(Animal: TAnimal; Id: Integer);
var
  sql : TSQLDataSet;
begin
  sql := TSqlDataSet.Create(nil);
  try
    sql.SQLConnection := DmConexao.sqlConexao;
    sql.CommandText   := 'select * from animal where (id = ' + IntToStr(Id) + ' )';
    sql.Open;

    with Animal do
    begin
      Id      := Sql.FieldByName('id').AsInteger;
      Tag     := Sql.FieldByName('tag').AsInteger;
      Fazenda := Sql.FieldByName('fazenda_id').AsInteger;
    end;

  finally
    sql.Free;
  end;

end;

function TDmAnimal.Excluir(Id: Integer; out sErro: string): Boolean;
begin
  with qryExcluir do
   begin
     Params[0].AsInteger := Id;
     try
       ExecSQL();
       Result := True;
     except on E: Exception do
       begin
         sErro  := 'Ocorreu um erro ao excluir o animal.' + E.Message;
         Result := False;
       end;
     end;
   end;
end;

function TDmAnimal.Alterar(Animal: TAnimal; out sErro: string): Boolean;
begin
   with qryAlterar, Animal do
   begin
     Params[0].AsInteger := Tag;
     Params[1].AsInteger := Fazenda;
     Params[2].AsInteger := Id;
     try
       ExecSQL();

       Result := True;
     except on E: Exception do
       begin
         sErro  := 'Ocorreu um erro ao alterar o animal.' + E.Message;
         Result := False;
       end;
     end;
   end;

end;

function TDmAnimal.Inserir(Animais: TObjectList<TAnimal>; out sErro: string): Boolean;
var
  Animal: TAnimal;
begin
  for Animal in Animais do
  begin
    with qryInserir, Animal do
    begin
      Params[0].AsInteger  := Tag;
      Params[1].AsInteger  := Fazenda;
      try
        ExecSQL();

        Result := True;
      except on E: Exception do
        begin
          sErro  := 'Ocorreu um erro ao inserir o animal.' + E.Message;
          Result := False;
        end;
      end;
    end;
  end;

end;

procedure TDmAnimal.Pesquisar(Tag: string);
begin

end;

end.
