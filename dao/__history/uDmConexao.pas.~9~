unit uDmConexao;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Stan.Param,
  FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Data.SqlExpr, Data.DBXFirebird, FireDAC.Phys.IBBase,
  FireDAC.Phys.FB, FireDAC.VCLUI.Wait, FireDAC.Comp.UI;

type
  TDmConexao = class(TDataModule)
    sqlFBConexao: TFDConnection;
    FDTransaction1: TFDTransaction;
    FDGUIxWaitCursor1: TFDGUIxWaitCursor;
    FDPhysFBDriverLink1: TFDPhysFBDriverLink;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
    function LerIniConexao(sSecao, sVariavel: String): String;
  public
    { Public declarations }
  end;

var
  DmConexao: TDmConexao;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TDmConexao.DataModuleCreate(Sender: TObject);
var
  caminho: String;
  transacao: TTransactionDesc;
begin
  try
    sqlFBConexao.Connected := False;
    caminho := LerIniConexao('CONFIG','database');
    Conexao.Params.Values['Database'] := caminho;
    Conexao.Connected := true;
  except on E: Exception do
    raise Exception.Create('Ocorreu erro de conexão do Banco de Dados');
  end;

end;

function TDmConexao.LerIniConexao(sSecao, sVariavel: String): String;
var
  sNomeArq: String;
  iniArq: TIniFile;
begin
  Result   := '';
  sNomeArq := extractfiledir(application.ExeName);
  sNomeArq := sNomeArq + '\Config.ini';

  if FileExists(sNomeArq) Then
  begin
    iniArq := TIniFile.Create(sNomeArq);
    Result := iniArq.ReadString(sSecao, sVariavel, '');
    iniArq.Free;
  end;
  // verifica se o arquivo ini existe;
  if not FileExists(sNomeArq) then
  begin
    Application.MessageBox('O arquivo de configuração não pode ser encontrado.','Atenção',1);
    Application.Terminate;
  end;

end;

end.
