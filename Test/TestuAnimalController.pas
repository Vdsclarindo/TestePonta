unit TestuAnimalController;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, uAnimalController, System.Generics.Collections, uAnimalModel,
  System.SysUtils;

type
  // Test methods for class TAnimalController

  TestTAnimalController = class(TTestCase)
  strict private
    FAnimalController: TAnimalController;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestInserir;
    procedure TestAlterar;
    procedure TestExcluir;
  end;

implementation

procedure TestTAnimalController.SetUp;
begin
  FAnimalController := TAnimalController.Create;
end;

procedure TestTAnimalController.TearDown;
begin
  FAnimalController.Free;
  FAnimalController := nil;
end;

procedure TestTAnimalController.TestInserir;
var
  ReturnValue: Boolean;
  sErro: string;
  ListaAnimais: TObjectList<TAnimal>;
begin
  ListaAnimais := TObjectList<TAnimal>.Create;

  Animal := TAnimal.Create;
  Animal.Tag     := '4567894654';
  Animal.Fazenda := 5;
  ListaAnimais.Add(Animal);

  ReturnValue := FAnimalController.Inserir(Animal, sErro);

  CheckEquals(True,ReturnValue, 'A Inclusão Falhou.');
end;

procedure TestTAnimalController.TestAlterar;
var
  ReturnValue: Boolean;
  sErro: string;
  Animal: TAnimal;
begin
  // TODO: Setup method call parameters
  ReturnValue := FAnimalController.Alterar(Animal, sErro);
  // TODO: Validate method results
end;

procedure TestTAnimalController.TestExcluir;
var
  ReturnValue: Boolean;
  sErro: string;
  Id: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FAnimalController.Excluir(Id, sErro);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAnimalController.Suite);
end.

